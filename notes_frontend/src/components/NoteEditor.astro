---
/**
 * PUBLIC_INTERFACE
 * Note editor for creating and updating notes.
 * Props:
 *  - note?: Note
 */
import type { Note } from "../services/notes";
const { note = undefined } = Astro.props;
const isNew = !note;
---
<div class="editor card">
  <div class="header">
    <strong>{isNew ? 'New Note' : 'Edit Note'}</strong>
    <div class="gap"></div>
    {!isNew ? <a class="btn ghost" href={`/notes/${encodeURIComponent((note as Note).id)}`}>Reset</a> : null}
    <button id="save-btn" class="btn primary">
      <svg width="14" height="14" viewBox="0 0 24 24" fill="none"><path d="M5 3h11l3 3v15a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2Zm0 2v14h12V7.83L14.17 5H5Zm2 4h8v2H7V9Zm0 4h8v2H7v-2Z" fill="#fff"/></svg>
      Save
    </button>
  </div>
  <div class="body">
    <div class="field">
      <label>Title</label>
      <input id="title" class="input" type="text" placeholder="Note title" value={note?.title || ''} />
    </div>
    <div class="field">
      <label>Category</label>
      <input id="category" class="input" type="text" placeholder="e.g., Work, Personal" value={note?.category || ''} />
    </div>
    <div class="field">
      <label>Tags</label>
      <input id="tags" class="input" type="text" placeholder="comma,separated,tags" value={(note?.tags || []).join(',')} />
      <small class="hint">Separate tags with commas</small>
    </div>
    <div class="field">
      <label>Content</label>
      <textarea id="content" class="input" rows="14" placeholder="Write your note...">{note?.content || ''}</textarea>
    </div>
  </div>
</div>

<style>
.editor { margin: 16px; display: flex; flex-direction: column; min-height: 0; }
.header {
  display: flex; align-items: center; gap: 8px; padding: 12px; border-bottom: 1px solid var(--border);
  position: sticky; top: 0; background: var(--card); z-index: 1;
}
.header .gap { flex: 1; }
.body { padding: 12px; display: grid; gap: 12px; }
.field label { display: block; font-size: 12px; color: var(--text-muted); margin-bottom: 6px; }
.hint { color: var(--text-muted); font-size: 12px; }
</style>

<script>
  const isNew = !Boolean(<?=(note ? 'true' : 'false')?>);
  const currentId = <?=(note ? JSON.stringify(note.id) : 'null')?>;

  function parseTags(v) {
    return (v || '')
      .split(',')
      .map(s => s.trim())
      .filter(Boolean);
  }

  function init() {
    const saveBtn = document.getElementById('save-btn');
    const title = document.getElementById('title') as HTMLInputElement | null;
    const category = document.getElementById('category') as HTMLInputElement | null;
    const tags = document.getElementById('tags') as HTMLInputElement | null;
    const content = document.getElementById('content') as HTMLTextAreaElement | null;

    saveBtn?.addEventListener('click', async () => {
      const payload: any = {
        title: title?.value || '',
        content: content?.value || '',
        tags: parseTags(tags?.value || ''),
        category: category?.value || undefined,
      };

      try {
        const notesSvc = await import("../services/notes.ts");
        if (isNew) {
          const created = await notesSvc.createNote(payload);
          window.location.href = `/notes/${encodeURIComponent(created.id)}`;
        } else if (currentId) {
          const updated = await notesSvc.updateNote(currentId, payload);
          window.location.href = `/notes/${encodeURIComponent(updated.id)}`;
        }
      } catch (err) {
        alert('Failed to save note.');
        console.error(err);
      }
    });
  }

  if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', init);
  else init();
</script>
